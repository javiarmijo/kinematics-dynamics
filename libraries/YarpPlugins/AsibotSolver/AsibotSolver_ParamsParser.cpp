/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sat Apr 19 00:43:13 2025


#include "AsibotSolver_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(AsibotSolverParamsCOMPONENT, "yarp.device.AsibotSolver")
}


AsibotSolver_ParamsParser::AsibotSolver_ParamsParser()
{
}


std::vector<std::string> AsibotSolver_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("A0");
    params.push_back("A1");
    params.push_back("A2");
    params.push_back("A3");
    params.push_back("invKinStrategy");
    params.push_back("mins");
    params.push_back("maxs");
    return params;
}


bool      AsibotSolver_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(AsibotSolverParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter A0
    {
        if (config.check("A0"))
        {
            m_A0 = config.find("A0").asFloat64();
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'A0' using value:" << m_A0;
        }
        else
        {
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'A0' using DEFAULT value:" << m_A0;
        }
        prop_check.unput("A0");
    }

    //Parser of parameter A1
    {
        if (config.check("A1"))
        {
            m_A1 = config.find("A1").asFloat64();
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'A1' using value:" << m_A1;
        }
        else
        {
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'A1' using DEFAULT value:" << m_A1;
        }
        prop_check.unput("A1");
    }

    //Parser of parameter A2
    {
        if (config.check("A2"))
        {
            m_A2 = config.find("A2").asFloat64();
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'A2' using value:" << m_A2;
        }
        else
        {
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'A2' using DEFAULT value:" << m_A2;
        }
        prop_check.unput("A2");
    }

    //Parser of parameter A3
    {
        if (config.check("A3"))
        {
            m_A3 = config.find("A3").asFloat64();
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'A3' using value:" << m_A3;
        }
        else
        {
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'A3' using DEFAULT value:" << m_A3;
        }
        prop_check.unput("A3");
    }

    //Parser of parameter invKinStrategy
    {
        if (config.check("invKinStrategy"))
        {
            m_invKinStrategy = config.find("invKinStrategy").asString();
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'invKinStrategy' using value:" << m_invKinStrategy;
        }
        else
        {
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'invKinStrategy' using DEFAULT value:" << m_invKinStrategy;
        }
        prop_check.unput("invKinStrategy");
    }

    //Parser of parameter mins
    {
        if (config.check("mins"))
        {
            {
                m_mins.clear();
                yarp::os::Bottle* tempBot = config.find("mins").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_mins.push_back(tempBot->get(i).asFloat64());
                    }
                }
                else
                {
                     yCError(AsibotSolverParamsCOMPONENT) <<"parameter 'mins' is not a properly formatted bottle";
                }
            }
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'mins' using value:" << m_mins;
        }
        else
        {
            yCError(AsibotSolverParamsCOMPONENT) << "Mandatory parameter 'mins' not found!";
            yCError(AsibotSolverParamsCOMPONENT) << "Description of the parameter: lower bound joint position limits";
            yCError(AsibotSolverParamsCOMPONENT) << "Remember: Units for this parameter are: 'deg'";
            return false;
        }
        prop_check.unput("mins");
    }

    //Parser of parameter maxs
    {
        if (config.check("maxs"))
        {
            {
                m_maxs.clear();
                yarp::os::Bottle* tempBot = config.find("maxs").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_maxs.push_back(tempBot->get(i).asFloat64());
                    }
                }
                else
                {
                     yCError(AsibotSolverParamsCOMPONENT) <<"parameter 'maxs' is not a properly formatted bottle";
                }
            }
            yCInfo(AsibotSolverParamsCOMPONENT) << "Parameter 'maxs' using value:" << m_maxs;
        }
        else
        {
            yCError(AsibotSolverParamsCOMPONENT) << "Mandatory parameter 'maxs' not found!";
            yCError(AsibotSolverParamsCOMPONENT) << "Description of the parameter: upper bound joint position limits";
            yCError(AsibotSolverParamsCOMPONENT) << "Remember: Units for this parameter are: 'deg'";
            return false;
        }
        prop_check.unput("maxs");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(AsibotSolverParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(AsibotSolverParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      AsibotSolver_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: AsibotSolver\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'A0': length of link 1\n");
    doc = doc + std::string("'A1': length of link 2\n");
    doc = doc + std::string("'A2': length of link 3\n");
    doc = doc + std::string("'A3': length of link 4\n");
    doc = doc + std::string("'invKinStrategy': IK configuration strategy\n");
    doc = doc + std::string("'mins': lower bound joint position limits\n");
    doc = doc + std::string("'maxs': upper bound joint position limits\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device AsibotSolver --A0 0.3 --A1 0.4 --A2 0.4 --A3 0.3 --invKinStrategy leastOverallAngularDisplacement --mins <mandatory_value> --maxs <mandatory_value>\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device AsibotSolver --mins <mandatory_value> --maxs <mandatory_value>\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
