/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Wed Apr 16 14:50:07 2025


#ifndef CARTESIANCONTROLSERVER_PARAMSPARSER_H
#define CARTESIANCONTROLSERVER_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class CartesianControlServer.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value    | Required | Description                                  | Notes                                                                  |
* |:----------:|:--------------:|:------:|:-----:|:----------------:|:--------:|:--------------------------------------------:|:----------------------------------------------------------------------:|
* | -          | name           | string | -     | /CartesianServer | 0        | local port prefix                            | -                                                                      |
* | -          | fkPeriod       | int    | ms    | 20               | 0        | FK stream period                             | -                                                                      |
* | -          | coordRepr      | string | -     | cartesian        | 0        | coordinate representation for transform port | cartesian, cylindrical, spherical, none                                |
* | -          | angleRepr      | string | -     | axisAngleScaled  | 0        | angle representation for transform port      | axisAngle, axisAngleScaled, RPY, eulerYZ, eulerZYZ, polarAzimuth, none |
* | -          | angularUnits   | string | -     | degrees          | 0        | angle representation for transform port      | degrees, radians                                                       |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device CartesianControlServer --name /CartesianServer --fkPeriod 20 --coordRepr cartesian --angleRepr axisAngleScaled --angularUnits degrees
* \endcode
*
* \code{.unparsed}
* yarpdev --device CartesianControlServer
* \endcode
*
*/

class CartesianControlServer_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    CartesianControlServer_ParamsParser();
    ~CartesianControlServer_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"CartesianControlServer"};
    const std::string m_device_name = {"CartesianControlServer"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_name_defaultValue = {"/CartesianServer"};
    const std::string m_fkPeriod_defaultValue = {"20"};
    const std::string m_coordRepr_defaultValue = {"cartesian"};
    const std::string m_angleRepr_defaultValue = {"axisAngleScaled"};
    const std::string m_angularUnits_defaultValue = {"degrees"};

    std::string m_name = {"/CartesianServer"};
    int m_fkPeriod = {20};
    std::string m_coordRepr = {"cartesian"};
    std::string m_angleRepr = {"axisAngleScaled"};
    std::string m_angularUnits = {"degrees"};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
