/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Wed Apr 16 14:50:07 2025


#ifndef ASIBOTSOLVER_PARAMSPARSER_H
#define ASIBOTSOLVER_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class AsibotSolver.
*
* These are the used parameters:
* | Group name | Parameter name | Type           | Units | Default Value                   | Required | Description                       | Notes |
* |:----------:|:--------------:|:--------------:|:-----:|:-------------------------------:|:--------:|:---------------------------------:|:-----:|
* | -          | A0             | double         | m     | 0.3                             | 0        | length of link 1                  | -     |
* | -          | A1             | double         | m     | 0.4                             | 0        | length of link 2                  | -     |
* | -          | A2             | double         | m     | 0.4                             | 0        | length of link 3                  | -     |
* | -          | A3             | double         | m     | 0.3                             | 0        | length of link 4                  | -     |
* | -          | invKinStrategy | string         | -     | leastOverallAngularDisplacement | 0        | IK configuration strategy         | -     |
* | -          | mins           | vector<double> | deg   | (0.0)                           | 0        | lower bound joint position limits | -     |
* | -          | maxs           | vector<double> | deg   | (0.0)                           | 0        | upper bound joint position limits | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device AsibotSolver --A0 0.3 --A1 0.4 --A2 0.4 --A3 0.3 --invKinStrategy leastOverallAngularDisplacement --mins \" (0.0) \" --maxs \" (0.0) \"
* \endcode
*
* \code{.unparsed}
* yarpdev --device AsibotSolver
* \endcode
*
*/

class AsibotSolver_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    AsibotSolver_ParamsParser();
    ~AsibotSolver_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"AsibotSolver"};
    const std::string m_device_name = {"AsibotSolver"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_A0_defaultValue = {"0.3"};
    const std::string m_A1_defaultValue = {"0.4"};
    const std::string m_A2_defaultValue = {"0.4"};
    const std::string m_A3_defaultValue = {"0.3"};
    const std::string m_invKinStrategy_defaultValue = {"leastOverallAngularDisplacement"};
    const std::string m_mins_defaultValue = {"(0.0)"};
    const std::string m_maxs_defaultValue = {"(0.0)"};

    double m_A0 = {0.3};
    double m_A1 = {0.4};
    double m_A2 = {0.4};
    double m_A3 = {0.3};
    std::string m_invKinStrategy = {"leastOverallAngularDisplacement"};
    std::vector<double> m_mins = { }; //Default values for lists are managed in the class constructor. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_maxs = { }; //Default values for lists are managed in the class constructor. It is highly recommended to provide a suggested value also for optional string parameters.

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
